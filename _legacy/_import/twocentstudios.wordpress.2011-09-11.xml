<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.2.1" created="2011-09-11 22:33" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>twocentstudios</title>
	<link>http://twocentstudios.com/blog</link>
	<description>Developing. iOS w/three20 &#38; more.</description>
	<pubDate>Sun, 11 Sep 2011 22:33:27 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://twocentstudios.com/blog</wp:base_site_url>
	<wp:base_blog_url>http://twocentstudios.com/blog</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>twocent1</wp:author_login><wp:author_email>chris@twocentstudios.com</wp:author_email><wp:author_display_name><![CDATA[Chris Trott]]></wp:author_display_name><wp:author_first_name><![CDATA[Chris]]></wp:author_first_name><wp:author_last_name><![CDATA[Trott]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.2.1</generator>

	<item>
		<title>Why?</title>
		<link>http://twocentstudios.com/blog/?p=6</link>
		<pubDate>Tue, 11 Jan 2011 00:00:29 +0000</pubDate>
		<dc:creator>twocent1</dc:creator>
		<guid isPermaLink="false">http://twocentstudios.com/blog/?p=6</guid>
		<description></description>
		<content:encoded><![CDATA[It would have been next to impossible to get to the point in my iPhone development that I am today without the humble guidance of small development studio blogs.

Just when my frustration was about to overtake me in an hour search for "how do I get that UIBarButtonItem to display correctly?" I would run across a blog with the answer. A little bit of code and a short explanation was all it took, and I was back on track.

This is why this blog was created. I've solved a number of problems big and small in the course of developing a handful of iPhone apps. The majority were worth the frustration, while some were stupid mistakes. I want to get better at writing iOS apps, and also pay forward what I've learned from the countless developers out there that took the time to write the post that helped me along.

I'm certainly no expert, and I don't do this for a living, but I'm still going to put my two cents out there. And hopefully I'll help a struggling newbie or two along the way.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2011-01-11 00:00:29</wp:post_date>
		<wp:post_date_gmt>2011-01-11 00:00:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>why</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[xDOTeHjPkxLR]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Inset Square with Three20 &amp; TTStyle</title>
		<link>http://twocentstudios.com/blog/?p=9</link>
		<pubDate>Sat, 05 Feb 2011 23:00:09 +0000</pubDate>
		<dc:creator>twocent1</dc:creator>
		<guid isPermaLink="false">http://twocentstudios.com/blog/?p=9</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://three20.info">Three20</a> is a pretty fantastic iOS library. One of the features that took me awhile to get a handle on was using TTView and TTStyles. Here, I'll show how to make a fancy square button that looks like this:

[caption id="attachment_10" align="aligncenter" width="102" caption="The square we&#39;ll be making sans background."]<a href="http://twocentstudios.com/blog/wp-content/uploads/2011/02/red-inset-square.png"><img class="size-full wp-image-10" title="red-inset-square" src="http://twocentstudios.com/blog/wp-content/uploads/2011/02/red-inset-square.png" alt="" width="102" height="94" /></a>[/caption]

I'm not going to go into getting started with Three20, how to create a default style sheet, or any other intro material. Just the meat and bones here.

<h2>The Style</h2>
Let's start with the good stuff. Here is the TTStyle we need to generate the box.

[objc] // In our default style sheet
- (TTStyle*)insetSquare{
  return [TTShapeStyle styleWithShape:[TTRoundedRectangleShape shapeWithRadius:8] next:
  [TTLinearGradientFillStyle styleWithColor1:RGBCOLOR(218, 0, 0) color2:RGBCOLOR(140, 0, 0) next:
  [TTInnerShadowStyle styleWithColor:RGBCOLOR(104, 2, 2) blur:3 offset:CGSizeMake(0, 1) next:nil]]];
}[/objc]

We start out by making our shape. In this case, we're using a rounded rectangle with a radius of 8px. "But I thought it was a square!" you may ask. Relax, we'll be specifying dimensions when we create our view in the next section.

If you're unfamiliar with creating TTStyles, each style has a <span style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace; font-size: 12px; line-height: 18px; white-space: pre;">next:</span> input used to string together multiple drawing commands.

Our next command is a linear gradient going from a light to medium red. <span style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace; font-size: 12px; line-height: 18px; white-space: pre;">RGBCOLOR</span> is a nice TT macro for creating colors you dream up in Photoshop. We'll use those as our color1 and color2 inputs.

Lastly, we're going to add an inner shadow to make our square look inset. We'll use an even darker red for this. Experiment with the blur and offset to achieve the desired effect. Blur will expand the size of the shadow while spreading out the effect. Beware, it doesn't work exactly the same as the inner shadow blending property in Photoshop (namely, it doesn't really extend past 10-20px or so).

The offset is a CGSize. We're using a 1px offset down. You'll usually be using y-axis offsets as the default light source is from above the screen. Don't forget about <code>RGBACOLOR</code> as well to experiment with different transparencies for your shadows.

That was pretty easy, right? I recommend checking out the TTCatalog example project custom views section for more great looking style examples.
<h2>Setting Up the View</h2>
Now we need a view to draw our beautiful new style. In your view controller, add the following:

[objc]  // In our view controller
- (void)viewDidLoad {
	// Create a new TTView
	TTView *insetSquareView = [[TTView alloc] initWithFrame:CGRectMake(40, 20, 240, 240)];

	// Set the style to our insetSquare style via the TTSTYLEVAR convenience macro
	insetSquareView.style = TTSTYLEVAR(insetSquare);

	// Sometimes you'll need to set the background color to clear so that the edges
	// of the rounded rectangle aren't opaque
	insetSquareView.backgroundColor = [UIColor clearColor];

	// Add it to the view and release it.
	[self.view addSubview:insetSquareView];
	TT_RELEASE_SAFELY(insetSquareView);
}[/objc]


The comments should be self explanatory. Setting the style will tell our view how to draw itself.

And the best part about our new inset square? It automatically scales to retina and standard res, and we don't have to worry about loading in tons of image files and bloating up our binary unnecessarily.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>9</wp:post_id>
		<wp:post_date>2011-02-05 23:00:09</wp:post_date>
		<wp:post_date_gmt>2011-02-05 23:00:09</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>inset-square-with-three20-ttstyle</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="three20"><![CDATA[Three20]]></category>
		<category domain="post_tag" nicename="ttstyle"><![CDATA[TTStyle]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[6ma2nCRXR8h0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>All About TTTableItems &amp; Cells</title>
		<link>http://twocentstudios.com/blog/?p=25</link>
		<pubDate>Sun, 06 Feb 2011 05:54:01 +0000</pubDate>
		<dc:creator>twocent1</dc:creator>
		<guid isPermaLink="false">http://twocentstudios.com/blog/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[Another tough thing about <a href="http://three20.info">Three20</a> was wrapping my head around the table system. I disliked it at first, but in retrospect, it's much more organized than using the standard SDK system. I found with even mildly complicated systems, my UITableViewController was turning into a mess of all kinds of delegate code, tablecell code, and etc.

TTTableViewController deserves a post in itself, so I won't get it into it at the moment. I'll only focus on the TableItem/Cell relationship and how to get the most of out of them.
<h2>What is a TTTableItem?</h2>
The standard SDK doesn't really have the concept of tableitems. A tableitem is simply a data structure that holds the information used in a single tablecell. It's the M in <a href="http://en.wikipedia.org/wiki/Model%E2%80%93View%E2%80%93Controller">MVC</a>. The cell is therefore the V. And the C is... well some combination of TTTableDataSource and TTTableViewController.

The second reason tableitems exist is so that we can have variable height rows. We'll discuss more about this later.

<h2>Customizing</h2>
When first starting out with Three20, it might be tempting just to use all the built-in Three20 items and cells. For quick prototyping and testing your backend, they are invaluable (I recommend perusing the TTCatalog section of TableItems to get a feel for what's already built-in). When you get to production, however, you'll want to have your own custom classes for each cell type, even if they are direct subclasses.

It may be a little extra work getting all the custom classes made, but in the end you'll be modular, organized, and you won't have to sweat the details.

There are so many subclasses of TTTableItems, you may be wondering which you should subclass.
<ul>
	<li>If your cell will be selected in any way, you'll want to subclass TTTableLinkedItem. This will provide you with a URL field that moves to the next view controller in the TTNavigator system. It will also provide you with an accessory URL field. There's built in functionality for displaying a detail disclosure button and other accessories depending on which URL fields are filled in.</li>
	<li>If you're just displaying data, you can go to the base class of TTTableItem.</li>
	<li>It's not the worst idea to use the higher level classes, but in the end it's probably easier just to add only the fields you need to the class so you don't get confused later wondering what the "text" NSString corresponds to.</li>
</ul>

<h2>Initializers</h2>
Most of the higher level items come with class convenience initializers. An example from TTTableSubtitleItem for context:
[objc]+ (id)itemWithText:(NSString*)text subtitle:(NSString*)subtitle URL:(NSString*)URL;[/objc]
If your cell is only displaying a few chunks of data, I would initialize this way. 

When you're working with lots of fields, it's much easier to pass in your model object or NSDictionary. My initializer from a TTTableLinkedItem subclass:
[objc]+ (id)itemWithObject:(TCExampleObject*)xObject;[/objc]
When you're doing it this way, you'll have to decide whether you want to manually move strings and data from your model object to table item class variables, or you can store a copy of your model object inside the item. It's a judgement call of whether you want to be tidy or quick and dirty. Just remember which way you did it when you're loading data into your cell.

<h2>Using Cells</h2>
(Don't worry about connecting items to cells yet. We'll cover that later.)

Cells are a little different than Items in the Three20 world. TTTableViewCells subclass from UITableViewCell, so they carry the remnants of the UI class. The UI class comes with two UILabels (textLabel and detailTextLabel) and a UIImageView.

In the Three20 built-in cells, the textLabels are usually used, but not the imageView. I recommend doing the same.

Start by making instance variables for each view element you need. Labels and imageViews are the most common, but any view will do. Next, override the initWithStyle initializer.
[objc] // TCExampleCell
- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString*)identifier {
	if (self = [super initWithStyle:UITableViewCellStyleValue2 reuseIdentifier:identifier]) {
		// If you're using custom backgrounds, initialize them here
		TTView *BackView = [[TTView alloc] initWithFrame:[self frame]];
		self.backgroundView = BackView;
		TT_RELEASE_SAFELY(BackView);
		
		TTView *BackViewSelected = [[TTView alloc] initWithFrame:[self frame]];
		self.selectedBackgroundView = BackViewSelected;
		TT_RELEASE_SAFELY(BackViewSelected);

		// Set the built-in text label properties here
		self.textLabel.backgroundColor = [UIColor clearColor];
		// ... + more
	}
	return self;
}[/objc]
Quick aside: be wary of setting built-in textLabel properties in the initWithStyle method if you're subclassing high-level cells such as TTTableImageItemCell, as these properties are changed in setObject. I spent several hours trying to track this down...

setObject is the method where you'll load your cell with data from the item.
[objc]- (void)setObject:(id)object {
  if (_item != object) {
    [super setObject:object];

    TCExampleItem* item = object;
    self.textLabel.text = item.firstName;
    self.detailTextLabel.text = item.lastName;
    self.suffixLabel.text = item.suffix;
    self.personPhotoImageView.image = TTImage(item.imageURL);
  }
}[/objc]

Before we get knee-deep in layout, go ahead and create initializers for your other views.
[objc]- (UILabel*)suffixLabel {
  if (!_suffixLabel) {
    _suffixLabel = [[UILabel alloc] init];
    _suffixLabel.textColor = [UIColor blackColor];
    _suffixLabel.highlightedTextColor = [UIColor whiteColor];
    _suffixLabel.font = TTSTYLEVAR(suffixFont);
    [self.contentView addSubview:_suffixLabel];
  }
  return _suffixLabel;
}[/objc]

Now for the hard part. Maybe. If you're using fixed height cells, it will be as easy as setting the frames of your views and going from there. In this case, your TTTableViewController will have the following in the initializer method:
[objc]self.tableView.rowHeight = TTSTYLEVAR(tExampleCellRowHeight);     // CGFloat
self.variableHeightRows = NO;[/objc]

If you are using variable height rows, you've got your work cut out for you. The main reason you'll be using variable height rows is if you have dynamic text or other content that you don't know the size of. Start by setting variableHeightRows to YES in your TTTableViewController initializer (opposite of the code above). Next, add the following class method:
[objc]+ (CGFloat)tableView:(UITableView*)tableView rowHeightForObject:(id)object {[/objc]
In essence you will be doing layout twice. The reason you have to do this is because the table needs to know how big each cell will be before it can create and lay out the cell. You can find more discussion on the Three20 Google Group, the main area for Three20 discussion thus far.

It's also difficult because this is a class method. The only information we get to work with is the cell's item and the tableView. In the instance method layoutSubviews, we'll get to work with the cell's instance variables.

In the future, I'll try to do a full example cell layout. Before you start this section, Lay out your cell in Photoshop or have a very good paper sketch of what you're going for. Otherwise, you'll be doing a lot of rework later on.

Use a static const to store your margins, or just use Three20's built in constants (variations of kTableCellVPadding, etc.). Work your way down vertically and add heights to a CGFloat. 

First, you'll need to calculate the maximum width of your text labels. Normally you'll only have one column to do this for. For example, this is from TTTableImageItemCell:
[objc]  CGFloat maxWidth = tableView.width - (imageWidth + kTableCellHPadding*2 + kTableCellMargin*2);[/objc]

Add your vertical margins, then calculate what the label sizes will be using the NSString method sizeWithFont:
[objc]CGSize firstNameSize = [item.firstName sizeWithFont:TTSTYLEVAR(firstNameFont)
                               constrainedToSize:CGSizeMake(maxWidth, CGFLOAT_MAX)
                                   lineBreakMode:UILineBreakModeWordWrap];
totalHeight += firstNameSize.height[/objc]

Once you've calculated the total height, return it and get ready to do it again.

In layout subviews, you'll do the same thing, only this time set the frames of all your views. Calculate the maxWidth again. Use maxWidth in sizeWithFont for each your views. Consult the TTTableImageItemCell source for a good (yet complicated) example of how to do this. This is also the place to set the styles of our cell backgrounds.
[objc]	[(TTView*)self.backgroundView setStyle:TTSTYLEVAR(tCellBackStyle)];
	[(TTView*)self.selectedBackgroundView setStyle:TTSTYLEVAR(tCellBackStyleSelected)];[/objc]

Don't forget to implement prepareForReuse. Here you'll want to remove the content you added in setObject, but don't release the objects.

<h2>Connecting the Item and Cell</h2>

The last thing we need to do is connect the cell and the item. This is actually pretty easy. In your datasource, override the cellClassForObject method:
[objc]- (Class)tableView:(UITableView *)tableView cellClassForObject:(id)object {
    if([object isKindOfClass:[TCExampleItem class]])
        return [TCExampleCell class];
    else
        return [super tableView:tableView cellClassForObject:object];
}[/objc]

If you have multiple cell types, add them in else ifs. This is where it comes in handy to have your own subclasses that match items to cells.

<h2>Conclusion</h2>

So that was a lot of information, and I know I glossed over quite a few things, but hopefully this gives you more of an idea of the benefits of using items and cells.

If anyone has any ideas for an example cell, let me know in the comments.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date>2011-02-06 05:54:01</wp:post_date>
		<wp:post_date_gmt>2011-02-06 05:54:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>all-about-tttableitems-cells</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="three20"><![CDATA[Three20]]></category>
		<category domain="post_tag" nicename="tttablecell"><![CDATA[TTTableCell]]></category>
		<category domain="post_tag" nicename="tttableitem"><![CDATA[TTTableItem]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[GDHo6ZIsfW7U]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>28</wp:comment_id>
			<wp:comment_author><![CDATA[Aditya H.]]></wp:comment_author>
			<wp:comment_author_email>aditya15417@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>118.96.48.113</wp:comment_author_IP>
			<wp:comment_date>2011-06-26 04:10:03</wp:comment_date>
			<wp:comment_date_gmt>2011-06-26 04:10:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is an awesome tutorial, I am just about to begin in using TTTableViewController and don't know where to start. This has given me an insight. Mind if I contact your personally to ask about details in creating a custom cell and TTTableView?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>TTTabStrip Controlled Multi-table Lazy-loading TTTableViewController</title>
		<link>http://twocentstudios.com/blog/?p=37</link>
		<pubDate>Sun, 13 Mar 2011 09:35:33 +0000</pubDate>
		<dc:creator>twocent1</dc:creator>
		<guid isPermaLink="false">http://twocentstudios.com/blog/?p=37</guid>
		<description></description>
		<content:encoded><![CDATA[Using a single TTTableViewController and a TTTabStrip can sometimes be an appropriate way to avoid drilling down through two tableviews. I'm going to walk through how to do this with a YouTube viewer as an example.
<a href="http://twocentstudios.com/blog/wp-content/uploads/2011/03/TTTabStrip-Example.png"><img class="aligncenter size-medium wp-image-38" title="TTTabStrip Example" src="http://twocentstudios.com/blog/wp-content/uploads/2011/03/TTTabStrip-Example-200x300.png" alt="" width="200" height="300" /></a>
Above is an example of the effect we're going for. I've used the Associated Press YouTube playlist feed for this example, and obviously the interface isn't finished yet. This tutorial will focus solely on how to pull and show multiple models and datasources in a single TTTableViewController. There won't be a full example project, and there also won't be any layout code. If you're still interested, read on!
<h2>Structure Overview</h2>
Our TTTableViewController has one TTTabStrip and one TTTableView. The TTTabStrip will load all playlists of a user and display each playlist title as a button. When the user taps a button, the TTTableView will load all the videos in the selected playlist as tableitems. This will be done lazily, meaning that when the controller loads up, it will first load the playlists from the server into the TTTabStrip. It will then select the first tab and load its videos list from the server. It will only load each playlist when it has been selected by the user after that, and retain the contents if they are selected again.

TTTableViewController expects to have only one model and one datasource. Keeping this in mind, there are several ways to accomplish the lazy loading and switching. My first impulse was to do everything with a single datasource which loaded different models and changed its items on the fly, which turned out to be too complicated for its own good. I also tried loading everything from a master model, but that killed the ability to do lazy loading, and was also difficult communicating back and forth with the controller. I settled on doing all the heavy lifting in the TTTableViewController, and that's what I'll be showing.
<h2>Setting Up the Datasources</h2>
Since we've decided to use our TTTableViewController as the director, we'll need to set up a few pointers in the header.

[objc]// TCYouTubeController.h
@interface TCYouTubeViewController : TTTableViewController &lt;TTTabDelegate&gt;{
    // The TabStrip sitting above the table
	TTTabStrip* _playlistsBar;

    // The model that generates a list of playlists for the TabStrip
	TCYouTubePlaylistsModel *_playlistsModel;

    // An array of TCYouTubeDataSource objects, one for each playlist
	NSMutableArray *_playlistDataSources;

    // A ppinter to the playlist datasource currently being viewed
	TCYouTubePlaylistDataSource *_activePlaylistDataSource;
}

@property (nonatomic, retain) TCYouTubePlaylistsModel* playlistsModel;
@property (nonatomic, retain) NSMutableArray* playlistDataSources;
@property (nonatomic, retain) TCYouTubePlaylistDataSource* activePlaylistDataSource;

// Convenience method for setting the active playlist from an index
// (usually from a button in an array whose entries correspond
// to those of the playlistModels)
- (void)setActivePlaylistAtIndex:(NSInteger)xActiveIndex;

@end[/objc]

We'll dig into what each of these pointers is going to do for us in a second. Moving onto the implementation:

In loadView:, set create a containerView to add your TTTabStrip and TTTableView to.

Next, we need to start the ball rolling in our createModel (defined in the TTTableController source). First check to make sure we haven't already loaded the playlists. If we haven't, create the model, add the controller as a delegate, and then start the load.

[objc]- (void)createModel {
	if (!_playlistsModel &amp;&amp; !_playlistsModel.isLoaded){
		TT_RELEASE_SAFELY(_playlistsModel);
		_playlistsModel = [[TCYouTubePlaylistsModel alloc] initWithUsername:kYouTubeUserName];
		[_playlistsModel.delegates addObject:self];
		[_playlistsModel load:TTURLRequestCachePolicyDefault more:NO];
	}
}[/objc]

I'll dig into what the model code should be doing in a second. We'll stay in the controller for now.

Since we registered as a delegate, our controller will receive a modelDidFinishLoad message after hitting the network. Here we want to check a couple things.

First, since we'll be receiving this message for each type of model (both playlist and videos) we have to check whether it's the playlists model we're expecting. If it is, clear out the dataSources array, then prepare an empty array of tabitems to add to the TTTabStrip.

Next, loop through each playlist in the playlists model. Create a new videos (single playlist) dataSource for each playlist and add it to the array we set up in the header for this purpose. Finally, make a corresponding tab containing the playlist title and add it to the TTTabStrip.

Since this is the first load, we want to load up the first playlist if it exists. We do this by momentarily setting the tabstrip index to max, then back to 0. This will trigger the setActivePlaylistAtIndex and load as if the user had tapped the button.

[objc]- (void)modelDidFinishLoad:(id&lt;TTModel&gt;)model {
	[super modelDidFinishLoad:model];

	// For only the playlist model...
	if ([model isEqual:self.playlistsModel]){
		// Clear out datasources
		self.playlistDataSources = nil;
		NSMutableArray *TabItems = [NSMutableArray arrayWithCapacity:0];

		// Iterate through playlist objects in the model
		for (TCYouTubeObjectPlaylist* Playlist in self.playlistsModel.playlists){
			TCYouTubePlaylistDataSource* NewDataSource = [[TCYouTubePlaylistDataSource alloc] initWithPlaylist:Playlist];
			[self.playlistDataSources addObject:NewDataSource];
			TT_RELEASE_SAFELY(NewDataSource);

			// Add buttons for all the playlists
			[TabItems addObject:[[[TTTabItem alloc] initWithTitle:Playlist.title] autorelease]];
		}

		if ([TabItems count]){
			_playlistsBar.tabItems = [NSArray arrayWithArray:TabItems];
		}

		// Initiate loading the first playlist
		[_playlistsBar setSelectedTabIndex:NSIntegerMax];
		[_playlistsBar setSelectedTabIndex:0];
	}
}[/objc]

To fulfill our responsibility as a TTTabDelegate, add the following function to the dot m:

[objc]#pragma mark TTTabDelegate
- (void)tabBar:(TTTabBar*)tabBar tabSelected:(NSInteger)selectedIndex{
	[self setActivePlaylistAtIndex:selectedIndex];
}[/objc]

Here we're just passing along the message to our setActive helper function that the user changed the playlist tab.

[objc]- (void)setActivePlaylistAtIndex:(NSInteger)xActiveIndex{
	if (self.playlistDataSources.count &gt; xActiveIndex){
		self.activePlaylistDataSource = [self.playlistDataSources objectAtIndex:xActiveIndex];
		self.dataSource = self.activePlaylistDataSource;
	}
}[/objc]

Setting self.dataSource will trigger a load from the network.

That's about all for controller. But before we move on, remember to dealloc, create initializers for all your variables, handle errors from modelDidFailLoadWithError, and also implement a load:more: mechanism if you need it (YouTube pages at 25 items).
<h2>The Playlists Model</h2>
Now that all the front end is patched in, we'll need to get the backend in place. The playlists model does not have a corresponding table datasource because we're loading the entries directly into the TTTabStrip (although you could probably make one if you wanted to).

Starting with the PlaylistsModel header, we have two pieces of data to store.

[objc]@interface TCYouTubePlaylistsModel : TTURLRequestModel  {
	NSString* _username;	//username to search for
	NSArray* _playlists;		//array of TCYouTubeObjectPlaylist
} [/objc]

We pass in a username from the controller, and the playlists will be available to the controller after the load.

The implementation is a textbook TTURLRequestModel.

[objc]- (void)load:(TTURLRequestCachePolicy)cachePolicy more:(BOOL)more{
// assemble the URL based on the username

// create a TTURLRequest

// create a TTURLXMLResponse to do the parsing
}

- (void)requestDidFinishLoad:(TTURLRequest*)request {
// make sure the root object looks like it should

// loop through assembling objects and adding them to the array
}[/objc]
<h2>The Videos DataSource &amp; Model</h2>
The last piece is the DataSource and Model for each playlist. I preface these with Videos because they could probably load from other sources besides a playlist. These are what will be loaded into the tableview as cells.

In the model, we need to keep the following information:

[objc]@interface TCYouTubeVideosModel : TTURLRequestModel {
	NSString* _sourceURL;	//URL that returns video entries (username, playlist, etc.)
	NSArray* _videos;       //array of TCYouTubeObjectVideo
}[/objc]

As I mentioned, the model needs a full source URL. This is for the purposes of reusability, and because that's what we get when we parse the playlists model.

The implementation will have the same format as the playlists model above. Except you'll probably be loading a lot more information into your object. The YouTube API is quite verbose (which is good!).

And because we'll be loading these objects into the table, we'll need a dataSource, TTTableItem, and TTTableCell. The dataSource should store its corresponding playlist object (containing the URL, title, etc.), and its model (used to get data about the videos in the data).

[objc]@interface TCYouTubePlaylistDataSource : TTListDataSource {
	TCYouTubeObjectPlaylist* _playlist;
	TCYouTubeVideosModel* _videosModel;
}[/objc]

Since we need the playlist, make an initializer to accept it. Then make the model right away.

[objc]- (id)initWithPlaylist:(TCYouTubeObjectPlaylist*)xPlaylist{
	if (self = [super init]) {
		_playlist = [xPlaylist retain];
		_videosModel = [[TCYouTubeVideosModel alloc] initWithSourceURL:[xPlaylist playlistURL]];
	}
	return self;
}

- (id&lt;TTModel&gt;)model {
	return _videosModel;
}
[/objc]

Don't forget to create your TTTableItems in didLoadModel. In this case, my TCYouTubeObjectVideo is a subclass of a TTTableItem, so I skipped most of this step.

[objc]- (void)tableViewDidLoadModel:(UITableView*)tableView {
	self.items = [NSMutableArray arrayWithArray:[_videosModel videos]];
}[/objc]

Connect up your TTTableItems and TTTableCells as I mentioned in my previous post <a href="http://twocentstudios.com/blog/?p=25">All About TTTableItems &amp; Cells</a>.

[objc]- (Class)tableView:(UITableView *)tableView cellClassForObject:(id)object {
    if([object isKindOfClass:[TCYouTubeObjectVideo class]])
        return [TCYouTubeVideoMultipleCell class];
    else
        return [super tableView:tableView cellClassForObject:object];
}[/objc]
<h2>Conclusion</h2>
Hopefully this has given you some insight on one way to load multiple table layouts with a single controller.

If you're looking for more information about how to do layout or work with YouTube, check out this walkthrough: <a href="http://www.karlmonaghan.com/2010/10/06/three20-youtube-table-cells/">Three20 YouTube table cells</a>. Although I haven't been able to get the webviews to load up for every video.

<h2>Update</h2>
It's important to clarify my getters and setters for playlistDataSource. I'm synthesizing it as:

[objc]@property (nonatomic, retain) NSMutableArray* playlistDataSources;[/objc]

And I'm overriding the getter like so:
[objc]- (NSMutableArray*)playlistDataSources{
	if (_playlistDataSources == nil){
		_playlistDataSources = [[NSMutableArray alloc] init];	
	}
	return _playlistDataSources;
}[/objc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date>2011-03-13 09:35:33</wp:post_date>
		<wp:post_date_gmt>2011-03-13 09:35:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tttabstrip-controlled-multi-table-lazy-loading-tttableviewcontroller</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="three20"><![CDATA[Three20]]></category>
		<category domain="post_tag" nicename="tttableviewcontroller"><![CDATA[TTTableViewController]]></category>
		<category domain="post_tag" nicename="tttabstrip"><![CDATA[TTTabStrip]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_tweet_this</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_clig</wp:meta_key>
			<wp:meta_value><![CDATA[http://twocentstudios.com/blog/?p=37]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_bitly</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_wp</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_yourls</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_url</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_jd_target</wp:meta_key>
			<wp:meta_value><![CDATA[http://twocentstudios.com/blog/?p=37]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_wp_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[Post Edited: TTTabStrip Controlled Multi-table Lazy-loading TTTableViewController http://twocentstudios.com/blog/?p=37]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_jd_post_meta_fixed</wp:meta_key>
			<wp:meta_value><![CDATA[true]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[Hn8Q6z7w755y]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>16</wp:comment_id>
			<wp:comment_author><![CDATA[Chris Trott]]></wp:comment_author>
			<wp:comment_author_email>chris@twocentstudios.com</wp:comment_author_email>
			<wp:comment_author_url>http://twocentstudios.com</wp:comment_author_url>
			<wp:comment_author_IP>98.253.117.44</wp:comment_author_IP>
			<wp:comment_date>2011-05-09 01:32:40</wp:comment_date>
			<wp:comment_date_gmt>2011-05-09 01:32:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Hrvoje,

1. I must have missed those when I was doing some code sanitizing/generalizing. I've updated them.

2. I forgot to mention how my getters and setters were declared. I've added that info the bottom of the post.

Thanks for pointing those out!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>15</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[Hrvoje Knezevic]]></wp:comment_author>
			<wp:comment_author_email>hrvoje@nubilus.hr</wp:comment_author_email>
			<wp:comment_author_url>http://www.nubilus.hr</wp:comment_author_url>
			<wp:comment_author_IP>94.253.144.238</wp:comment_author_IP>
			<wp:comment_date>2011-05-08 21:03:57</wp:comment_date>
			<wp:comment_date_gmt>2011-05-08 21:03:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Greetings,

The article is a bit upside down; however it's great and nice peace of code. It's a great way to load more stuff into single controller.

Thanks!

p.s. I realize this is a concept article, however there are few small things I would like to mention just for future readers:

1. Some classes have prefix KT instead of TC.

2. there's a bug in - (void)modelDidFinishLoad:(id)model
where the playlistDataSources becomes nil and a few lines later gets used that way.

// Clear out datasources
self.playlistDataSources = nil;

I guess you could just use removeAllObjects message on the object in question.
(Also, there is no code showing the creation of playlistDataSources).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>The iPhone 3G and Me: Obsolete Before the Contract Even Ended</title>
		<link>http://twocentstudios.com/blog/?p=49</link>
		<pubDate>Fri, 18 Mar 2011 23:13:26 +0000</pubDate>
		<dc:creator>twocent1</dc:creator>
		<guid isPermaLink="false">http://twocentstudios.com/blog/?p=49</guid>
		<description></description>
		<content:encoded><![CDATA[I've had a love-hate relationship with my iPhone since iOS4.

I have an iPhone 3G. I got it a little under two years ago, at around the same time the 3GS hit stores. I can justify my mistake of not dropping the extra $100 because I was just out of school, didn't have a job yet, and just wanted something to start testing my first few apps on.

I've been pretty much dying to get an iPhone 4, but realize the error in my ways of buying old over buying new.

My memory is a little foggy, but I think it worked great up until iOS4. The only features I figured I was missing out on were the compass (which actually would have been useful a couple times I was lost in the city) and the OpenGL ES upgrade (didn't really do any serious gaming). Nothing else really jumped out to me, and that's why I thought my decision was for the best for quite awhile. (Thinking back again, I was disappointed that I didn't get voice control).

I was stricken to hear that my iPhone wouldn't be getting the multitasking capability in iOS4. I was working on a prototype for an app that used local notifications and I was unsure of how it would work on a real device with all the backgrounding jazz that had to go on. Still, I pushed on.

It was really the day to day stuff that was the worst. I even had friends with 3GSs complain about how much iOS4.0 bogged them down. I think the later releases of 4.1 and 4.2 cleared that up, but for me the bottom dropped out and stayed there. I watched a few funny spoof videos of iPhone commercials with the 3G taking 20 seconds to load up an app. Those helped me through the pain.

Maps used to be usable during my 3G's first year. I could even play music <i>AND</i> and look at a map at the same time. Now, I start up the app and it will either crash and burn, or lock up for five minutes and lag on each tap after that.

It's the same with my core group of daily apps. Twitter, Facebook, Safari. Apps doing simple things now stuttered and crashed. Some of it was just the overhead growing as I'd expect. But some of it was the curse of being able to do too much. Every time you start up the Facebook app, you can see the location services kick in. This activity brings my phone to its knees. 

Twitter added its infamous ad bar to the top (yeah, I know what it's called, haha) which also slows my reading experience down considerably. Not only that, but the start-up-from-where-I-left-off feature was completely brushed to the side as the 3Gs have become less popular. As a user I can complain as much as I want about these little signs of betrayal. However, as a developer I have to consider the exact same things. Do I really care how many people like me are still using a 3G? If it takes me an extra month to rewrite a feature to work for them, will they have already ditched their phone by the time I get it out? Do that many developers even still possess a 3G to do testing on?

Apple in some ways has done an okay job of keeping their patrons from getting too left behind. If they had decided not to support iOS4 on the 3G at all, then I would have no way of running apps written for iOS4 and higher, and therefore the developers whose apps I would have bought would be out of luck. They also had the foresight to realize that multitasking wasn't feasible with the memory capacity of the 3G, and I'm sure had to work a little harder to make two different versions. But at the same time, there has been some serious wishful thinking in the belief that an iPhone 3G can handle the other upgrades that iOS4 brought to the table.

The nail in the coffin came for me last week when I went to do my (bi-monthly?) SDK update. iTunes kept telling me I already had the latest version of iOS at 4.2.1. Impossible, I thought, and scoured the blogs to find that 4.3 had indeed been released earlier in the week. Then I found the angry posts on the Apple forums of "NOOOOO. Apple has abandoned me!!!". My 3G is now unsupported by Apple and cannot receive any more iOS updates.

In a lot of ways my fellow 3G owners do have a point. They were still selling the 3G well into the term of the 3GS. It hasn't been the length of my 2 year AT&T contract and my phone is already unsupported. Not even that, but for someone who bought the 3G the day before it was discontinued (right before the iPhone 4 was released), that person may have started off with iOS4 and a more or less unusable phone.

So is the 3G (and the original iPhone) just a fluke? I have neither the circumstantial or the benchmarking evidence to predict whether the 3GS will stand the test of time longer. I'm disappointed that I own such a remarkable piece of hardware (in the grand scheme of things) and yet a lot of days I feel more crippled than I was with my WM6 phone or any of the feature phones I used to own.

What's the solution? I think Apple should stop selling their old hardware a little sooner. It's very clear that they don't have any desire to make two tiers of phone hardware, so they shouldn't accept having the de-facto tiers of old and new. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date>2011-03-18 23:13:26</wp:post_date>
		<wp:post_date_gmt>2011-03-18 23:13:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-iphone-3g-and-me-obsolete-before-the-contract-even-ended</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="3g"><![CDATA[3G]]></category>
		<category domain="category" nicename="commentary"><![CDATA[Commentary]]></category>
		<category domain="category" nicename="ios"><![CDATA[iOS]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[esHowq8KLcaX]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>didShowModel Blues</title>
		<link>http://twocentstudios.com/blog/?p=52</link>
		<pubDate>Tue, 05 Apr 2011 02:55:40 +0000</pubDate>
		<dc:creator>twocent1</dc:creator>
		<guid isPermaLink="false">http://twocentstudios.com/blog/?p=52</guid>
		<description></description>
		<content:encoded><![CDATA[I'm working with a TTTableViewController right now. Try to stay with me.

TableViewController gets pushed onto the navigation stack, hits the network looking for data, and loads the data. I want to animate the top cell so it looks like it moves a little to the right then bounces back into place. This is supposed to key the user into the fact that there's more info lurking beneath the top cell layer and that they should swipe to reveal it (a la the showMenu: and hideMenu: pre-rolled functions).

My first thought (which always seems to be wrong) was to trigger this in didShowModel in the TTTableViewController. This is supposed to be the moment when all the layout is has been completed, right? To test my theory, if I call showMenu not animated to push all the views right, then call hideMenu animated, it should swoop in just as the cells load.

It doesn't seem to work that way. The behavior I viewed in this situation was instead that the showMenu didn't have any effect, and then the hideMenu (triggered a second later with a timer) would swipe everything off to the left (instead of bringing it from off-screen back into front and center). After didShowModel completes, is something going on in the TT objects that's resetting the move I'm doing?

For now, it seems like the best solution, although a bit hacky, is to set a short timer (0.3 seconds) in the didShowModel that calls back to a function with a CAAnimation group. This gives both the TTTableViewController time to lay out its views and get out of dodge, and also lets the user see the table momentarily before it starts moving. This is essentially the same as setting an animation delay.

With that problem out of the way, I have to say that the animation effect is kind of cool, but I feel like it will definitely be fatiguing to users to see this animation every time the table loads. Should it be only for the first five table loads the user ever does? Should it be only for the first table load in every launch? Only for the first couple days after download? I'm thinking option A, but I'll have to wait until the beta testing to zero in on that answer.

In any case, I'll have to step through the TTTableViewController code to find out where the layout is getting reset. If anyone else has done this before, let me know in the comments.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date>2011-04-05 02:55:40</wp:post_date>
		<wp:post_date_gmt>2011-04-05 02:55:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>didshowmodel-blues</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="animation"><![CDATA[Animation]]></category>
		<category domain="post_tag" nicename="showmenu"><![CDATA[showMenu]]></category>
		<category domain="post_tag" nicename="tttableviewcontroller"><![CDATA[TTTableViewController]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<category domain="post_tag" nicename="ux"><![CDATA[UX]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[dxUK7Vn2PARM]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TTXMLParser With a Variable Number of Elements</title>
		<link>http://twocentstudios.com/blog/?p=57</link>
		<pubDate>Sun, 17 Apr 2011 20:57:39 +0000</pubDate>
		<dc:creator>twocent1</dc:creator>
		<guid isPermaLink="false">http://twocentstudios.com/blog/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[I've probably re-solved this problem at least three times, so time to document it.

Let's say you're dealing with an XML feed response from a webservice. You're using the TTXMLParser extension. Here's an example of what we might get back from a webservice that shows a user's recently read books:

[xml]&lt;response&gt;
  &lt;book&gt;
    &lt;title&gt;The Stranger&lt;/title&gt;
    &lt;author&gt;Albert Camus&lt;/author&gt;
    &lt;completed&gt;Apr 11&lt;/completed&gt;
  &lt;/book&gt;
  &lt;book&gt;
    &lt;title&gt;Pinball 1973&lt;/title&gt;
    &lt;author&gt;Haruki Murakami&lt;/author&gt;
    &lt;completed&gt;Apr 5&lt;/completed&gt;
  &lt;/book&gt;
&lt;/response&gt;
[/xml]

The number of books is completely variable. This is the problem we're going to solve below. It could return zero, one, or more book elements.

First off, you have to tell your TTURLXMLResponse that it's an RSS feed. It doesn't actually have to be RSS, they just mean "is it going to have multiple elements with the same element name?" like we have with book elements. So we'll check that off.

[objc]TTURLXMLResponse* response = [[TTURLXMLResponse alloc] init];
response.isRssFeed = YES[/objc]

Now we've got to deal with the response in requestDidFinishLoad.

[objc]- (void)requestDidFinishLoad:(TTURLRequest*)request {
	TTURLXMLResponse* response = request.response;

	// The root object should definitely be a dictionary
	TTDASSERT([response.rootObject isKindOfClass:[NSDictionary class]]);
	NSDictionary* feed = response.rootObject;
	
	// Use &quot;arrayForKey&quot; not &quot;objectForKey&quot; as explained below
	if ([feed objectForKey:@&quot;book&quot;] != nil])
		NSArray* entries = [feed arrayForKey:@&quot;book&quot;];

	// { Parse the feed and do whatever else you need to do}
}[/objc]

The important part of the code is using arrayForKey instead of objectForKey. If we dig into the Three20 code:

[objc]@interface NSDictionary (TTXMLAdditions)
//...
/**
 * @return Performs an &quot;objectForKey&quot;, then puts the object into an array. If the
 * object is already an array, that array is returned.
 */
- (NSArray*)arrayForKey:(id)key;[/objc]

If the service returns only a single book, the object we get back for the "book" element will still be an array, but it will be an array of <i>strings</i> and not an array of <i>dictionaries</i> like we expect. ArrayForKey solves this by giving us back an array of dictionaries even if there is only one entry.

Note that I had to check that an object existed for books before calling arrayForKey. In my experience, this method <i>will</i> crash if an object doesn't exist for the key, so be careful!
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date>2011-04-17 20:57:39</wp:post_date>
		<wp:post_date_gmt>2011-04-17 20:57:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ttxmlparser-with-a-variable-number-of-elements</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="tturlrequestmodel"><![CDATA[TTURLRequestModel]]></category>
		<category domain="post_tag" nicename="ttxmlparser"><![CDATA[TTXMLParser]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[ajOiRf9Ju8oV]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TTTableViewController &amp; didReceiveMemoryWarning</title>
		<link>http://twocentstudios.com/blog/?p=72</link>
		<pubDate>Sun, 01 May 2011 19:08:48 +0000</pubDate>
		<dc:creator>twocent1</dc:creator>
		<guid isPermaLink="false">http://twocentstudios.com/blog/?p=72</guid>
		<description></description>
		<content:encoded><![CDATA[<i>Note: this is adapted from my post on the Three20 forums <a href="http://forums.three20.info/discussion/98/tttableviewcontroller-didreceivememorywarning">here</a> and was relevant for at least v1.0.5.</i>

I was having trouble with a rare situation in which my app with two tabs would randomly mutate its table cells. It was more difficult to track down that this was occurring after a memory warning than it was to fix the actual problem. I was doing a lot of my view loading in init, something I hadn't fixed from when I had originally started writing this particular app over a year ago.

After moving moving the relevant assignments to loadView and viewDidLoad, I was still running into the problem where a memory warning would clear the loadingView, errorView, or emptyView on the tab that wasn't currently visible.

[caption id="attachment_73" align="aligncenter" width="550" caption="Before and after memory warning"]<a href="http://twocentstudios.com/blog/wp-content/uploads/2011/05/memory-warning_before-after.png"><img src="http://twocentstudios.com/blog/wp-content/uploads/2011/05/memory-warning_before-after-1024x768.png" alt="" title="memory-warning_before-after" width="550" height="412" class="size-large wp-image-73" /></a>[/caption]

After some backtracing through TTModelViewController and TTTableViewController, I narrowed down the problem to updateViewStates in TTModelViewController. At this line:

[objc]if (!_flags.isShowingLoading &amp;&amp; !_flags.isShowingModel &amp;&amp; !_flags.isShowingError) {
  showEmpty = !_flags.isShowingEmpty;
  _flags.isShowingEmpty = YES;
}[/objc]

The if statement evaluates to true as expected because the controller is not showing an error, the model, or loading. The problem is in the next line. _flags.isShowingEmpty has not been reset even though it isn't showing empty anymore due to the clear by didReceiveMemory warning. Therefore, the local variable showEmpty is set to NO, and _flags.isShowingEmpty is set unconditionally to YES even though it isn't really showing the empty view.

The way to fix this locally is to override didReceiveMemoryWarning in your TTTableViewController subclass.

[objc]- (void)didReceiveMemoryWarning {
  [super didReceiveMemoryWarning];
  [self invalidateModel];
}[/objc]

invalidateModel calls resetViewStates in the model. This will set all the view _flags to NO and the next pass through updateViewStates will trigger the correct action.

The permanent fix in Three20's TTModelViewController would be:

[objc]- (void)didReceiveMemoryWarning {
  if (_hasViewAppeared &amp;&amp; !_isViewAppearing) {
    [super didReceiveMemoryWarning];
    [self resetViewStates];  // add this line
    [self refresh];
  } else {
    [super didReceiveMemoryWarning];
  }
}[/objc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date>2011-05-01 19:08:48</wp:post_date>
		<wp:post_date_gmt>2011-05-01 19:08:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tttableviewcontroller-didreceivememorywarning</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="didreceivememorywarning"><![CDATA[didReceiveMemoryWarning]]></category>
		<category domain="category" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="ttmodelviewcontroller"><![CDATA[TTModelViewController]]></category>
		<category domain="post_tag" nicename="tttableviewcontroller"><![CDATA[TTTableViewController]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[JUvSwODnZYUo]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Learning Ruby and Rails</title>
		<link>http://twocentstudios.com/blog/?p=79</link>
		<pubDate>Fri, 06 May 2011 02:56:55 +0000</pubDate>
		<dc:creator>twocent1</dc:creator>
		<guid isPermaLink="false">http://twocentstudios.com/blog/?p=79</guid>
		<description></description>
		<content:encoded><![CDATA[Last October, a couple things came together at the same time which prompted to want to learn Rails.
<h2>Starting Out</h2>
I had been listening to Dan Benjamin's <a title="5by5" href="http://5by5.tv" target="_blank">5by5</a> podcasts nearly since they started at the beginning of the year, and always came away feeling like Ruby was a force to be reckoned with. I was also getting a little burnt out doing iOS stuff. All my coding in college was C and assembly. After that was strictly iOS for a year and change up to that point.

As I constantly brainstormed new app ideas and looked at the most successful apps that had come, gone, and stayed in the AppStore charts, I realized that the best ones (that aren't games) are viewports into webservices. The problem was that I didn't know anything about writing server-side anything. My web endeavors began and ended in high school before CSS was a toddler.

I was on a big productivity kick at work, trying to find ways to better connect the project groups in my office. Everyone was half-heartedly talking about group to-do lists, MS Project, spreadsheets on a server, all the usual suspects. My idea at the time was to have some kind of inter-office Twitter feed, and of course I needed to do some server-side stuff to get that to happen. (I can't remember exactly what happened, but I ended up giving up on the idea and with it, learning Rails).

At the time, I don't think I was aware of all the CMS frameworks in PHP and other languages that would make this a cakewalk. I know the WordPress theme would have been extremely easy to set up. But either way, I wanted to get my hands dirty. But I also wanted results. And because I was impatient, I skipped Ruby and dived straight into Rails.

That was my first mistake. I've read a few things about how most people could go either way with learning Ruby first or jumping straight into Rails. I couldn't quite make it without Ruby.

<span style="font-size: 20px; font-weight: bold;">Diving In</span>

It felt kind of like when your middle school teacher assigns a book to read and says, "If you get stuck, just skip the words you don't know and keep reading". Except that with diving straight into Rails, I felt like I didn't know a single word. As soon as I hit something I didn't understand, my brain would stick in a loop and I couldn't move on without understanding what the line meant. And without base Ruby, I could go nowhere.

So I tried <a title="tryruby" href="http://tryruby.org" target="_blank">tryruby</a>. But it kept crashing and I didn't have a pure Ruby project to work on, so it never really stuck.

I then tried a couple Rails tutorials, including Rails for Zombies. <a title="Rails for Zombies" href="http://railsforzombies.org/" target="_blank">Rails for Zombies</a> was great, but since my knowledge was so shallow, I was just going through the motions and not retaining anything. After a weekend or two of trying to power through the learning phase, I'm ashamed to say I quit. I gave up my idea for my office, and I quit. I came crawling back to iOS.
<h2>Doing It the Right Way</h2>
Fast forward to March. I came across the opportunity to learn Ruby for my day job. The idea of learning Ruby and Rails had still been simmering since the Fall. I was almost actively looking for any reason to learn them. The task I had to complete was to import a bunch of old customer support tickets into Zendesk. A nice, bite-sized Ruby project.

I knew that I really needed to learn Ruby this time around. Not just enough to fake my way through Rails, but really get a handle on the ins and outs. Luckily, I came across <a title="Ruby Koans" href="http://rubykoans.com/" target="_blank">Ruby Koans</a> which kicked my butt up and down the text editor. I can't say enough great things about it. Really wonderful little courselet.

As a quick aside, I've never really coded in a scripting language before, even Javascript, so one of the hardest things about Ruby at first was literally just understanding the entry point and the program flow. int main has always been my friend, but now I was just sitting at the terminal saying, "Great. I just wrote all these modules and classes and functions, now where do I use them?".

I worked through Koans, and went to start on my task. The first part was finding gems to help me out. I found a gem for the Zendesk-API, a csv parser, and an XML assembler. Looking through the source of these gems helped me understand more about program flow and best practices on code structure.

It took plenty of trial and error, but after all that I pounded out a nice little script to import a csv file into Zendesk using Ruby. It felt good.
<h2>Onto Rails</h2>
Fast forward again a month, and I realized that I was in a much better position to learn Rails now. It just so happened that administrating Zendesk for a little while and starting to use <a title="TestFlight" href="http://testflightapp.com" target="_blank">TestFlight</a> for my iOS beta testing really started to inspire another productivity kick around the office.

I'm pretty familiar with most of the engineering processes and workflows at my day job. The problem is that they're all pretty archaic. Lots of MS Office tools because that's what everyone knows. And even though they're not designed for it, Excel is used to lay out forms, email is used to do workflows, and even SharePoint is now in the mix. Using the wrong tools diverts a lot of time towards the wrong things.

So I decided that I was going to write a workflow system for an engineering process. It doesn't have a lot of data that needs stored, and it's mostly users interacting with one set of objects. I don't think it's more than I can chew, but I guess we'll see because it's not done yet.

I ran across a Rails tutorial I hadn't seen before. <a title="Ruby on Rails Tutorial" href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book" target="_blank">Ruby on Rails Tutorial</a> by Michael Hartl was exactly what I needed. Doesn't pull punches, but also patiently explains every step of the way. Again, highly recommended. Read it cover to cover, and I'm still going back for more. It gets pretty tough at the end though, especially for someone like me with little to no experience with databases.
<h2>Where am I Now?</h2>
I've brainstormed out my database tables, listed my routes, mocked up most of the screens, and I think I'm ready to dive into code. I wanted to mark this moment as a point of little knowledge that will hopefully make me feel better when I (hopefully) have a lot of Rails knowledge in the distant future.

If anyone had other good routes to Ruby and/or Rails fluency, I'd love to hear about it in the comments.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>79</wp:post_id>
		<wp:post_date>2011-05-06 02:56:55</wp:post_date>
		<wp:post_date_gmt>2011-05-06 02:56:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>learning-ruby-and-rails</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="commentary"><![CDATA[Commentary]]></category>
		<category domain="post_tag" nicename="learning"><![CDATA[learning]]></category>
		<category domain="category" nicename="rails"><![CDATA[Rails]]></category>
		<category domain="post_tag" nicename="rails-2"><![CDATA[rails]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[P8dBzh2yTWwo]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>When Learning a New Language, One Book is Never Enough</title>
		<link>http://twocentstudios.com/blog/?p=87</link>
		<pubDate>Wed, 18 May 2011 18:33:50 +0000</pubDate>
		<dc:creator>twocent1</dc:creator>
		<guid isPermaLink="false">http://twocentstudios.com/blog/?p=87</guid>
		<description></description>
		<content:encoded><![CDATA[How do you go about learning a new programming language or tool?

My steps to learning a new language are traditionally as follows:
<ol>
	<li>Stare blankly at source code of new language until my eyes and brain hurt.</li>
	<li>Acquire a book and fight my way through it, reading from cover to cover.</li>
	<li>Use said book and Google to code up whatever idea had originally inspired me to learn the language.</li>
	<li>Find more well-written (I hope?) source code and this time actually understand about half of it.</li>
	<li>Acquire a second book and read through it slightly faster than the first, seeing things I read in the first explained in a slightly different way.</li>
	<li>Work on a more complicated idea, using all previous knowledge acquired.</li>
	<li>Start using only Google, Github, and targeted blog posts to gain more knowledge.</li>
</ol>
As a kid (high school, college), I realize I relied way too much on one source of information when learning a new language. Of course, the internet wasn't the same as it is now, but the bookshelves were definitely filled with plenty of "Beginning Zombiescript++" books. Heck, I remember pulling random books off the shelves and leafing through them just to try to figure out why I would want to use whatever language they were teaching. Most of time I couldn't figure it out.

I've seen it a million times through my schooling years; I just don't really get things the first time through. A lot of the time that was because I didn't really understand why I needed to know what I was being taught in the first place (which is an entire topic of its own). But even if I saw the entire birds-eye view of a subject, it would still take seeing it from a different angle to really get me to connect the dots.

(Aside: I know of the popular technique of immediately trying to teach what you've just learned. At the initial stages of learning, I find this pointless. Mostly because it only really makes sense for memorization type exercises, and if you're trying to teach something serious, you're not really teaching, you're pandering to be corrected. I only feel comfortable publicly teaching after I know I have enough knowledge to put together that general birds-eye view curriculum and have proven successes.)

One particular event in college when things really lined up for me was learning assembly in two different courses at the same time. I was learning x86 assembly in my systems programming class, while at the same time learning TI DSP assembly in my digital signal processing lab. Before starting these, it wasn't obvious to me that assembly wasn't like C++ or other high level languages that you wrote once and someone else wrote the compiler for each system type to make it run. Seeing how the instruction sets were tailored to the main function of each processor (processing digital signals, running complex operating systems, etc.) opened my eyes to the underlying logic of how these systems were designed in a way it wouldn't have understood if I were just taking one of the classes.

<strong>When you're learning something new, get as many perspectives as you can on whatever you're learning early on.</strong> Not only will it help you better understand the subject itself, but it will also prevent you from getting a "brainwashed" view of your subject. If one author thinks the best way to teach iOS programming is to start with learning everything there is to know about views, you might be a little disappointed when you realize you didn't have to worry about them at all to write your first UITableView driven app. Likewise, if the author you're reading thinks it's fine and dandy to never touch the CoreGraphics framework, having another perspective might change your mind if you're building a very customized UI.

The other thing to hunt out furiously when you're first starting out is the big picture. Knowing what you don't know, knowing what you need to know now, and knowing what you can do with libraries and frameworks is the main focus here. I was painfully unaware of how to find good opensource libraries when I started out iOS programming, and in turn wrote a ton of basic low-level stuff from scratch. A lot of it was wrong, and a lot of it worked anyway even though it was so hacked together it was indecipherable the next day. I did learn a lot from this, but only by seeing it done correctly later (usually <em>much</em> later). And also by getting a few apps under my belt and revisiting it to assess the damage. There are some cases where it's a good idea to roll your own, but it's almost always a better idea to use it as a guided exercise so you can immediately learn from your mistakes.

The last tip I have is to push yourself in your research often. This usually means reading blogs and opensource projects containing advanced topics and problems about your chosen subject. You will almost certainly run into terms, algorithms, techniques, and ideas you will need to know in the future. Bookmark anything that jumps out at you, and maybe try to gather enough understanding to write a one paragraph summary of it (for your own personal future reference). It's good to get that first meeting out of the way so you're ready to start building recognition the next time you see them.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date>2011-05-18 18:33:50</wp:post_date>
		<wp:post_date_gmt>2011-05-18 18:33:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>when-learning-a-new-language-one-book-is-never-enough</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="commentary"><![CDATA[Commentary]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[cY4OtNtbggVw]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[Patrik Björklund]]></wp:comment_author>
			<wp:comment_author_email>p.bjorklund@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://rails.pbjorklund.com</wp:comment_author_url>
			<wp:comment_author_IP>85.230.221.247</wp:comment_author_IP>
			<wp:comment_date>2011-06-03 09:59:30</wp:comment_date>
			<wp:comment_date_gmt>2011-06-03 09:59:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Really valid point on trying to teach without having the full picture!

I recently started with rails myself and im trying to do just that, documenting what I come across. The thing about trying to "teach" is that it forces me to think. Perhaps there is a difference between teaching and thinking out loud?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>State of the Three20 Union</title>
		<link>http://twocentstudios.com/blog/?p=89</link>
		<pubDate>Sun, 10 Jul 2011 05:14:37 +0000</pubDate>
		<dc:creator>twocent1</dc:creator>
		<guid isPermaLink="false">http://twocentstudios.com/blog/?p=89</guid>
		<description></description>
		<content:encoded><![CDATA[I've been sitting on this topic for a little while now, and feel like I should finally weigh in on where the Three20 framework is at this point.
<h2>Where I Started</h2>
I started working with Three20 a little over a year ago. In that time, a lot of really talented people have improved the library to the point where it is today. They have done great work that all of us have benefitted from greatly. Recently, I got comfortable enough with the library to start filling in holes in the documentation using this blog.

But I think everyone in the community has started to feel the weight of Three20. I think the three main reasons for this are documentation, architecture, and community. All of which seem to be making each other worse as time goes on.
<h2>Documentation</h2>
Three20 has gotten continuous flak on Twitter, blogs, and anywhere else iOS devs talk for the lack of documentation. There's really no argument against that. Everyone acknowledges it.

A lot of people have gone out of their way to help with tutorials and blog posts that usually get a sliver of functionality across. But a lot of them are intermediate or advanced and assume you know about dependencies and other Three20 magic. And there's no nice neat repository for all of them. And a lot of them are out of date.

The startup docs written by Jeff are great for just that: getting started. This gives beginners a taste of what Three20 can do for them and completely leaves them out to dry once they try their first customization. So they look at the documentation and find nothing. Then they look at the source and find nothing. Then they search blogs and find a bunch of old stuff. Then they get pissed off after a number of hours or days and give up and post angry comments to Twitter.

With the mass of source that Three20 has, I can't blame them. It's tough to know where to start, especially if you want to use a large portion of the library. And this is definitely not something that can be explained in a short bit of source documentation. It's much better suited to an Apple "programming guide" type document. This just doesn't exist because I truly believe there aren't that many people that know the library inside and out. And those that do exist are busy fixing the plethora of issues and pull requests.
<h2>Architecture</h2>
The modularity that Jeff introduced sometime last year was heavily called for and a step in the right direction in theory. But I think the problem is that Three20 was originally written as a cohesive app, and you basically had to add all seven or so components anyway in order to get the thing to build (I always included the full library because I usually use all of it, so don't quote me on that).

There used to be a chart that had "The Three20 Ecosystem" showing how all the table stuff worked together. I still believe the concept behind the Three20 table structures has plenty of merit over Apple's. But you can definitely tell that the architecture is such that it works for the Facebook app, but not much else without a lot of rewriting, which almost defeats the purpose of having reusable library components.

Three20 has a lot of independent goodies and additions that don't have much to do with the architecture. But most of the components require you to do things The Three20 Way. And if you're going to use Three20 the way it was intended, you should probably be writing an app that has similar layout.

Three20 is best for making apps for web services that have assets in databases. I'm not sure how else to describe this, but maybe API-centered app is the best description. Think of Facebook then set your bounds somewhere outside of that. Most all your data used in the app should come from the cloud. The webservice should have a well-documented API. It should be heavily URL based.

This is because Three20's URL system does not do well with passing around data. Sure, it can do it. But it's not designed for it. You'll be fighting the whole way, especially with tablecells. Each view controller should have a corresponding URL on your webservice for best compatibility.

This post isn't about when you should use Three20 so I'll cut that example short. Needless to say, those new to Three20 don't know if they should or shouldn't be using it because there's no documentation because there are so few people that understand the library and we're back to the chicken and egg problem.
<h2>Community</h2>
I have to be frank with this one. There are plenty of great people in the Three20 community so I don't want to give the wrong impression that I know all the players and I can pass judgement freely. But from what I see, there's an increasing number of weight that is being added to the community due to many of the problems mentioned above.

Let me start with a fictional iOS developer. He's been developing using standard libraries for a year or so and has the basics of Objective-C, Foundation, and UIKit down. He hears something about a library from the Facebook developers, checks out the github page, sees some examples, and says, "Wow, this is awesome. This will save me a ton of time writing my own networking classes and photo rendering classes and all that other stuff that I need right now but don't have time to dig into the Apple frameworks to perfect." In one word, they get greedy.

This is perfectly normal. Perfectly acceptable too. This is exactly what I thought when I first saw the framework. After all, the whole point of a framework is having a black box to use where you need it without having to have thousands of developers write the same code. Spending more time on your app-specific business logic and app aesthetic is the siren song of most developers.

But whereas some developers give up and curse Three20 after not finding any documentation, there are also two other groups.

Group 1 digs even harder for documentation. They find and read every blog post, step through the source of every provided example, and even <em>read the source until they understand it</em>. Obviously this takes a long time, and thus the group is small.

Group 2 immediately pounds Stack Overflow and the Three20 forum with questions. They don't hesitate to file issues on github for anything and everything they don't understand and assume is a bug. A lot of the time, they really didn't understand the standard UIKit way in the first place, and are more or less spinning their tires and flinging mud in everyone else's faces.

Group 2 exists in every community, but they usually are indistinguishable because plenty of books and guides exist for all three groups to use. The main contributors are there to answer the really tough questions, but they mainly get to work on fixing mission-critical bugs and writing new features/components. So again, we come back to a lack of documentation making a different problem worse.
<h2>Where To Go From Here</h2>
Again, I am not trying to demean any of the hard work all the Three20 contributors have done, especially Joe's original idea and Jeff's great curation. My main question is this... <strong>is the Three20 framework salvageable?</strong>

From where I sit right now, I don't believe it is.

I think those moderately familiar with the library understand that there are a lot of inherent flaws baked into the framework. Hindsight has made those flaws easily visible, but still not extractable from the framework. It's a cliche to say that programmers love to rewrite their projects, but in this case I'd like to think we're rewriting this time from higher ground.

I know I'm not the only one that feels this way. Jeff's new <a href="https://github.com/jverkoey/nimbus" target="_blank">Nimbus</a> project seems to be the answer to many the above complaints. Documentation is the number one priority of the project, and so far Jeff is doing great out of the gate. Many of the best parts of Three20 will be ported over, but foreseeably with all the changes that have come from Jeff's hindsight of the project.

What do I mean by not salvageable? I think that more time should be spent rewriting Three20 as Nimbus than should be spent fixing the multitude of Three20 bugs that exist. That being said, I should probably put my money where my mouth is and help with some of that workload.

I hate to see Three20 collapse under its own weight seeing as how much great work has been put into it. The rapid iteration of the iOS frameworks requires even more rapid iteration of community-driven frameworks to keep up. I think the best way for Three20 to keep up is to gradually migrate to its new form. This will also give us a chance to reevaluate the need for some of the Three20 functionality that was written to cover up holes in previous iOS versions that have since been filled by Apple. It will also give a chance to incorporate other open source projects that have become well known and stable since Three20 was originally started.

This post was not meant to be an attack on the community, and I'm definitely not trying to be a Negative Nancy. I'd simply like to document my opinion on the source and exacerbation of Three20's problems so that hopefully the same mistakes can be avoided in the future.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date>2011-07-10 05:14:37</wp:post_date>
		<wp:post_date_gmt>2011-07-10 05:14:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>state-of-the-three20-union</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="commentary"><![CDATA[Commentary]]></category>
		<category domain="category" nicename="ios"><![CDATA[iOS]]></category>
		<category domain="post_tag" nicename="three20"><![CDATA[Three20]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[C53lbKypWsCf]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>36</wp:comment_id>
			<wp:comment_author><![CDATA[John Wang]]></wp:comment_author>
			<wp:comment_author_email>jwang392@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>24.165.60.96</wp:comment_author_IP>
			<wp:comment_date>2011-07-10 21:16:29</wp:comment_date>
			<wp:comment_date_gmt>2011-07-10 21:16:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It's the swiss army knife problem. There's too much history with the project. I've run into this before with other projects. Trying to solve too many problems good, versus solving one problem excellent. It's why I pushed for ASIHTTPRequest library instead of TTNetworking library. Jeff does plan to use Nimbus to take over Three20 though. There's a migration doc now.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>37</wp:comment_id>
			<wp:comment_author><![CDATA[Chris Trott]]></wp:comment_author>
			<wp:comment_author_email>chris@twocentstudios.com</wp:comment_author_email>
			<wp:comment_author_url>http://twocentstudios.com</wp:comment_author_url>
			<wp:comment_author_IP>98.253.117.44</wp:comment_author_IP>
			<wp:comment_date>2011-07-11 00:42:35</wp:comment_date>
			<wp:comment_date_gmt>2011-07-11 00:42:35</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I agree, John. I had started thinking about this a little before Jeff announced Nimbus and I figured this would be a good time to draw a line in the sand so that those not as familiar with things could get up to speed. (By the way, we all really appreciate the work you've put into the library as well.)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>36</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Hosting</title>
		<link>http://twocentstudios.com/blog/?p=95</link>
		<pubDate>Sat, 30 Jul 2011 07:03:46 +0000</pubDate>
		<dc:creator>twocent1</dc:creator>
		<guid isPermaLink="false">http://twocentstudios.com/blog/?p=95</guid>
		<description></description>
		<content:encoded><![CDATA[My rent on my shared garbage VPS is up in early August and I'm not sure what to do. I've got two problems and a number of routes I could go.

I know very little about server admining and hosting. Next to nothing I'd say. I would like to learn, but like anything, there's an opportunity cost to it. I'm leaning towards not taking the easy way out this time, simply because I know some more advanced knowledge of Linux will most likely be useful sometime in my not-so-distant future.

My first problem to solve is what platform is best for this blog. I started on Wordpress because it's ridiculously easy to leave all the technical stuff aside and just get to writing. Unfortunately, I don't know any PHP and don't much care to learn it, so hacking on it is out of the question for now. And if I'm not going to try to deal with PHP, I might as well put my eggs in one basket and try to hack on a Rails blog framework. So I guess my real problem is how to migrate the few posts on here over to a Rails platform (after setting it up of course).

Seeing as I've decided not to continue on with Wordpress and switch to Rails, the next item on the agenda is where to host it.
<ol>
	<li><strong>Stay on my current garbage VPS for another year.</strong> This is what I'd call the easy way out. I could leave the WP version of this blog and the rest of my site up and give myself some time to migrate over. While supposedly my VPS does support Rails, I don't get command line access without paying some ridiculous fee, and I have no idea what its capabilities are.</li>
	<li><strong>Set up something on Heroku.</strong> I was exploring Heroku a little bit over last weekend, and things there are looking rather nice. However, I think it may end up being too complicated for the low-key hodge-podge of things I'd be running on it. At some point in the future I'd like to deploy some stuff there just to check it out in greater detail.</li>
	<li><strong>Set up a VPS on Linode.</strong> I feel like I would easily learn the most on this route. I'd get a chance to really dig into a Linux distro and learn how to set everything up manually. I know there are a ton of great tutorials out there for doing pretty much anything on a fresh install. The only downside is that I'm sure it would pretty much every waking moment of my freetime to get everything I need up and running to the capability I'm at right now. I'm just not sure I have that kind of time to devote to this right now.</li>
</ol>
With all that being said, I looks like maybe my best option is to go with #1 (as much as I feel like I'm wussing out), and shoot for #3 next year. That will give me some more time to get a better hold on Rails.

If anyone else has been in this boat before, I'd love to hear about it in the comments.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date>2011-07-30 07:03:46</wp:post_date>
		<wp:post_date_gmt>2011-07-30 07:03:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hosting</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="commentary"><![CDATA[Commentary]]></category>
		<category domain="post_tag" nicename="hosting"><![CDATA[hosting]]></category>
		<category domain="category" nicename="rails"><![CDATA[Rails]]></category>
		<category domain="post_tag" nicename="rails-2"><![CDATA[rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sfw_comment_form_password</wp:meta_key>
			<wp:meta_value><![CDATA[cZ3FcUGhotHC]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>39</wp:comment_id>
			<wp:comment_author><![CDATA[Mari Lynch]]></wp:comment_author>
			<wp:comment_author_email>marilynch93942@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.marilynch.com</wp:comment_author_url>
			<wp:comment_author_IP>50.131.50.223</wp:comment_author_IP>
			<wp:comment_date>2011-08-22 05:51:08</wp:comment_date>
			<wp:comment_date_gmt>2011-08-22 05:51:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You may have resolved all this. I'm not a huge fan of WordPress even tho I use it (hard to make a switch with so much content up).  Best wishes with your new platform.

The following isn't my area of expertise. However, IT wizard I admire switched a custom db created for me from Heroku to his own.  Seems it was a great move.  The db was built in Rails.  Also, for hosting, another IT savvy guy I trust swears by Hurricane Electric - http://www.he.net/web_hosting.html I'm still using Network Solutions for hosting just because I haven't gotten around to making the switch. Manana!

Why did I jump on your blog? Because you created a merch tracking app my daughter likes (she's a tour manager for musicians). Thanks!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
</channel>
</rss>
